package sam.console;

public final class VT100 {
    public static final double VERSION = 1.2;
    
	/* ###############################################################
	 * ######################  Device Status #########################
	 * ############################################################### 
	 * 
	 * The following codes are used for reporting terminal/display settings, and vary depending on the implementation:
	 */

	/** Requests a Report Device Code response from the device. */
	public static void query_device_code(){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[c");
	}

	/** Generated by the device in response to Query Device Code request. */
	public static void report_device_code(int code){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[{code}0c");
	}

	/** Requests a Report Device Status response from the device. */
	public static void query_device_status(){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[5n");
	}

	/** Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly. */
	public static void report_device_ok(){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[0n");
	}

	/** Generated by the device in response to a Query Device Status request; indicates that device is functioning improperly. */
	public static void report_device_failure(){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[3n");
	}

	/** Requests a Report Cursor Position response from the device. */
	public static void query_cursor_position(){
		throw new UnsupportedOperationException("not implemented yet");
		//System.out.print("\u001b[6n");
	}

	/** Generated by the device in response to a Query Cursor Position request; reports current cursor position. */
	public static void report_cursor_position(){
		System.out.print("\u001b[{ROW};{COLUMN}R");
	}


	/* ###############################################################
	 * ######################  Terminal Setup #########################
	 * ############################################################### 
	 * 
	 * The h and l codes are used for setting terminal/display mode, and vary depending on the implementation. Line Wrap is one of the few setup codes that tend to be used consistently:
	 */

	/** Reset all terminal settings to default. */
	public static void reset_device(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001bc");
	}

	/** Text wraps to next line if longer than the length of the display area. */
	public static void enable_line_wrap(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[7h");
	}

	/** Disables line wrapping. */
	public static void disable_line_wrap(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[7l");
	}




	/* ###############################################################
	 * ######################  Fonts #########################
	 * ############################################################### 
	 * 
	 * Some terminals support multiple fonts: normal/bold, swiss/italic, etc. There are a variety of special codes for certain terminals; the following are fairly standard:
	 * 
	 */

	/** Set default font. */
	public static void font_set_g0(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b(");
	}

	/** Set alternate font. */
	public static void font_set_g1(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b)");
	}


	/* ###############################################################
	 * ######################  Cursor Control #########################
	 * ############################################################### 
	 */

	/** Sets the cursor position where subsequent text will begin. If no row/column parameters are provided (ie. <ESC>[H), the cursor will move to the home position, at the upper left of the screen. */
	public static void cursor_home(int row, int column){
		System.out.printf("\u001b[%d;%dH", row, column);
	}

	/** Moves the cursor up by COUNT rows; the default count is 1. */
	public static void cursor_up(int count){
		System.out.printf("\u001b[%sA", count);
	}

	/** Moves the cursor down by COUNT rows; the default count is 1. */
	public static void cursor_down(int count){
		System.out.printf("\u001b[%dB", count);
	}

	/** Moves the cursor forward by COUNT columns; the default count is 1. */
	public static void cursor_forward(int count){
		System.out.printf("\u001b[%dC", count);
	}

	/** Moves the cursor backward by COUNT columns; the default count is 1. */
	public static void cursor_backward(int count){
		System.out.printf("\u001b[%dD", count);
	}

	/** Identical to Cursor Home. */
	public static void force_cursor_position(int row, int column){
		System.out.printf("\u001b[%d;%df", row, column);
	}

	/** Save current cursor position. */
    private static boolean saved;
    public  static void save_cursor() {
        saved = true;
        System.out.print("\u001b[s");
    }

	/** Restores cursor position after a Save Cursor. */
   public static void unsave_cursor() {
        if(!saved)
            return;
        System.out.print("\u001b[u");
        saved = false;
    }

	/** Save current cursor position. */
	public static void save_cursor_attrs(){
		System.out.print("\u001b7");
	}

	/** Restores cursor position after a Save Cursor. */
	public static void restore_cursor_attrs(){
		System.out.print("\u001b8");
	}

	/* ###############################################################
	 * ###################### Scrolling #########################
	 * ############################################################### 
	 */

	/** Enable scrolling for entire display. */
	public static void enable_screen_scroll(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[r");
	}

	/** Enable scrolling from row {start} to row {end}. */
	public static void scroll_screen(int start, int end){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.printf("\u001b[%d;%dr", start , end);
	}

	/** Scroll display down one line. */
	public static void scroll_down(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001bD");
	}

	/** Scroll display up one line. */
	public static void scroll_up(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001bM");
	}

	/* ###############################################################
	 * ###################### tab control #########################
	 * ############################################################### 
	 */


	/** Sets a tab at the current position. */
	public static void set_tab(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001bH");
	}

	/** Clears tab at the current position. */
	public static void clear_tab(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[g");
	}

	/** Clears all tabs. */
	public static void clear_all_tabs(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[3g");
	}


	/* ###############################################################
	 * ###################### Erasing Text #########################
	 * ############################################################### 
	 */

	/** Erases from the current cursor position to the end of the current line. */
	public static void erase_end_of_line(){
		System.out.print("\u001b[K");
	}

	/** Erases from the current cursor position to the start of the current line. */
	public static void erase_start_of_line(){
		System.out.print("\u001b[1K");
	}

	/** Erases the entire current line. */
	public static void erase_line(){
		System.out.print("\u001b[2K");
	}

	/** Erases the screen from the current line down to the bottom of the screen. */
	public static void erase_down(){
		System.out.print("\u001b[J");
	}

	/** Erases the screen from the current line up to the top of the screen. */
	public static void erase_up(){
		System.out.print("\u001b[1J");
	}

	/** Erases the screen with the background colour and moves the cursor to home. */
	public static void erase_screen(){
		System.out.print("\u001b[2J");
	}

	/* ###############################################################
	 * ###################### Printing #########################
	 * ###############################################################
	 * 
	 * Some terminals support local printing:
	 *  
	 */

	/** Print the current screen. */
	public static void print_screen(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[i");
	}

	/** Print the current line. */
	public static void print_line(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[1i");
	}

	/** Disable log. */
	public static void stop_print_log(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[4i");
	}

	/** Start log; all received text is echoed to a printer. */
	public static void start_print_log(){
		throw new UnsupportedOperationException("not implemented yet"); 
		// System.out.print("\u001b[5i");
	}



}
